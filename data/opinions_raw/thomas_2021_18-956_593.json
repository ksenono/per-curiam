{
    "case": {
        "docket": "18-956",
        "citation": "593",
        "year": 2021,
        "url": "https://supreme.justia.com/cases/federal/us/593/18-956/"
    },
    "id": "4382273",
    "author": "thomas",
    "type": "dissent",
    "text": "SUPREME COURT OF THE UNITED STATES_________________No. 18\u2013956_________________GOOGLE LLC, PETITIONERv.ORACLE\nAMERICA, INC.on writ of certiorari to the united states\ncourt of appeals for the federal circuit[April 5, 2021]Justice Thomas, with whom Justice Alito joins,\ndissenting.Oracle spent years developing a programming\nlibrary that successfully attracted software developers, thus\nenhancing the value of Oracle\u2019s products.[1] Google sought a license to use the library in\nAndroid, the operating system it was developing for mobile phones.\nBut when the companies could not agree on terms, Google simply\ncopied verbatim 11,500 lines of code from the library. As a result,\nit erased 97.5% of the value of Oracle\u2019s partnership with Amazon,\nmade tens of billions of dollars, and established its position as\nthe owner of the largest mobile operating system in the world.\nDespite this, the majority holds that this copying was fair\nuse.The Court reaches this unlikely result in large\npart because it bypasses the antecedent question clearly before us:\nIs the software code at issue here protected by the Copyright Act?\nThe majority purports to assume, without deciding, that the code is\nprotected. But its fair-use analysis is wholly inconsistent with\nthe substantial protection Congress gave to computer code. By\nskipping over the copyrightability question, the majority\ndisregards half the relevant statutory text and distorts its\nfair-use analysis. Properly considering that statutory text,\nOracle\u2019s code at issue here is copyrightable, and Google\u2019s use of\nthat copyrighted code was anything but fair.IIn the 1990s, Oracle created a programming\nlanguage called Java. Like many programming languages, Java allows\ndevelopers to prewrite small subprograms called \u201cmethods.\u201d Methods\nform the building blocks of more complex programs. This process is\nnot unlike what legislatures do with statutes. To save space and\ntime, legislatures define terms and then use those definitions as a\nshorthand. For example, the legal definition for \u201crefugee\u201d is more\nthan 300 words long. 8 U.\u00a0S.\u00a0C. \u00a71101(42). Rather than\nrepeat all those words every time they are relevant, the U.\u00a0S.\nCode encapsulates them all with a single term that it then inserts\ninto each relevant section. Java methods work similarly. Once a\nmethod has been defined, a developer need only type a few\ncharacters (the method name and relevant inputs) to invoke\neverything contained in the subprogram. A programmer familiar with\nprewritten methods can string many of them together to quickly\ndevelop complicated programs without having to write from scratch\nall the basic subprograms.To create Java methods, developers use two kinds\nof code. The first, \u201cdeclaring code,\u201d names the method, defines\nwhat information it can process, and defines what kind of data it\ncan output. It is like the defined term in a statute. The second,\n\u201cimplementing code,\u201d includes the step-by-step instructions that\nmake those methods run.[2] It\nis like the detailed definition in a statute.Oracle\u2019s declaring code was central to its\nbusiness model. Oracle profited financially by encouraging\ndevelopers to create programs written in Java and then charging\nmanufacturers a fee to embed in their devices the Java software\nplatform needed to run those programs. To this end, Oracle created\na work called Java 2 Platform, Standard Edition, which included a\nhighly organized library containing about 30,000 methods. Oracle\ngave developers free access to these methods to encourage them to\nwrite programs for the Java platform. In return, developers were\nrequired to make their programs compatible with the Java platform\non any device. Developers were encouraged to make improvements to\nthe platform, but they were required to release beneficial\nmodifications to the public. If a company wanted to customize the\nplatform and keep those customizations secret for business\npurposes, it had to pay for a separate license.By 2005, many companies were racing to develop\noperating systems for what would become modern smartphones.\nOracle\u2019s strategy had successfully encouraged millions of\nprogrammers to learn Java. As a result, Java software platforms\nwere in the vast majority of mobile phones. Google wanted to\nattract those programmers to Android by including in Android the\ndeclaring code with which they were now familiar. But the founder\nof Android, Andrew Rubin, understood that the declaring code was\ncopyrighted, so Google sought a custom license from Oracle. At\nleast four times between 2005 and 2006, the two companies attempted\nto negotiate a license, but they were unsuccessful, in part because\nof \u201ctrust issues.\u201d App. 657.When those negotiations broke down, Google\nsimply decided to use Oracle\u2019s code anyway. Instead of creating its\nown declaring code\u2014as Apple and Microsoft chose to do\u2014Google copied\nverbatim 11,500 lines of Oracle\u2019s declaring code and arranged that\ncode exactly as Oracle had done. It then advertised Android to\ndevice manufacturers as containing \u201cCore Java Libraries.\u201dId., at 600. Oracle predictably responded by suing Google\nfor copyright infringement. The Federal Circuit ruled that Oracle\u2019s\ndeclaring code is copyrightable and that Google\u2019s copying of it was\nnot fair use.IIThe Court wrongly sidesteps the principal\nquestion that we were asked to answer: Is declaring code protected\nby copyright? I would hold that it is.Computer code occupies a unique space in\nintellectual property. Copyright law generally protects works of\nauthorship. Patent law generally protects inventions or\ndiscoveries. A library of code straddles these two categories. It\nis highly functional like an invention; yet as a writing, it is\nalso a work of authorship. Faced with something that could fit in\neither space, Congress chose copyright, and it included declaring\ncode in that protection.The Copyright Act expressly protects computer\ncode. It recognizes that a \u201ccomputer program\u201d is protected by\ncopyright. See 17 U.\u00a0S.\u00a0C. \u00a7\u00a7109(b), 117, 506(a). And it\ndefines \u201c\u00a0\u2018computer program\u2019\u00a0\u201d as \u201ca set of statements or\ninstructions to be used directly or indirectly in a computer in\norder to bring about a certain result.\u201d \u00a7101. That definition\nclearly covers declaring code\u2014sets of statements that indirectly\nperform computer functions by triggering prewritten implementing\ncode.Even without that express language, declaring\ncode would satisfy the general test for copyrightability.\n\u201cCopyright protection subsists .\u00a0.\u00a0. in original works of\nauthorship fixed in any tangible medium of expression.\u201d \u00a7102(a).\n\u201cWorks of authorship include .\u00a0.\u00a0. literary works,\u201d which\nare \u201cworks .\u00a0.\u00a0. expressed in words, numbers, or other\nverbal or numerical symbols.\u201d \u00a7\u00a7101, 102(a). And a work is\n\u201coriginal\u201d if it is \u201cindependently created by the author\u201d and\n\u201cpossesses at least some minimal degree of creativity.\u201dFeist\nPublications,Inc.v.Rural Telephone Service\nCo.,499 U.S.\n340, 345 (1991). The lines of declaring code in the Java\nplatform readily satisfy this \u201cextremely low\u201d threshold.Ibid.First, they are expressed in \u201cwords, numbers, or other\nverbal or numerical symbols\u201d and are thus works of authorship.\n\u00a7101. Second, as Google concedes, the lines of declaring code are\noriginal because Oracle could have created them any number of\nways.Google contends that declaring code is a \u201cmethod\nof operation\u201d and thus excluded from protection by \u00a7102(b). That\nsubsection excludes from copyright protection \u201cany idea, procedure,\nprocess, system, method of operation, concept, principle, or\ndiscovery, regardless of the form in which it is described,\nexplained, illustrated, or embodied.\u201d This provision codifies the\n\u201cidea/expression dichotomy\u201d that copyright protection covers only\nthe \u201cthe author\u2019s expression\u201d of an idea, not the idea itself.Golanv.Holder,565 U.S.\n302, 328 (2012). A property right in the idea itself \u201ccan only\nbe secured, if it can be secured at all, by letters-patent.\u201dBakerv.Selden,101 U.S.\n99, 105 (1880). Thus, for example, a \u201cmethod of book-keeping\u201d\nis not protected by copyright, but the expression describing that\naccounting method is.Id., at 101\u2013102. So too, a person who\nwrites a book inventing the idea of declaring code has a copyright\nprotection in the expression in the book, but not in the idea of\ndeclaring code itself. Google acknowledges that implementing code\nis protected by the Copyright Act, but it contends that declaring\ncode is much more functional and thus is a \u201cmethod of operation\u201d\noutside the scope of protection.That argument fails. As the majority correctly\nrecognizes, declaring code and implementing code are \u201cinextricably\nbound\u201d together.Ante, at 22. Declaring code defines the\nscope of a set of implementing code and gives a programmer a way to\nuse it by shortcut. Because declaring code incorporates\nimplementing code, it has no function on its own. Implementing code\nis similar. Absent declaring code, developers would have to write\nevery program from scratch, making complex programs prohibitively\ntime consuming to create. The functionality of both declaring code\nand implementing code will thus typically rise and fall\ntogether.Google\u2019s argument also cannot account for\nCongress\u2019 decision to define protected computer code as \u201ca set of\nstatements or instructions to be useddirectly or indirectlyin a computer in order to bring about a certain result.\u201d \u00a7101\n(emphasis added). Hence, Congress rejected any categorical\ndistinction between declaring and implementing code. Implementing\ncode orders a computer operation directly. Declaring code does so\nindirectly by incorporating implementing code. When faced with\ngeneral language barring protection for \u201cmethods of operation\u201d and\nspecific language protecting declaring code, the \u201c\u00a0\u2018specific\ngoverns the general.\u2019\u00a0\u201dRadLAX Gateway Hotel,LLCv.Amalgamated Bank,566\nU.S. 639, 645 (2012).This context makes clear that the phrase \u201cmethod\nof operation\u201d in \u00a7102(b) does not remove protection from declaring\ncode simply because it is functional. That interpretation does not,\nhowever, render \u201cmethod of operation\u201d meaningless. It is \u201cgiven\nmore precise content by the neighboring words with which it is\nassociated.\u201dUnited Statesv.Williams,553 U.S.\n285, 294 (2008). Other terms in the same subsection such as\n\u201cidea,\u201d \u201cprinciple,\u201d and \u201cconcept\u201d suggest that \u201cmethod of\noperation\u201d covers the functions and ideas implemented by computer\ncode\u2014such as math functions, accounting methods, or the idea of\ndeclaring code\u2014not the specific expression Oracle created. Oracle\ncannot copyright the idea of using declaring code, but it can\ncopyright the specific expression of that idea found in its\nlibrary.Google also contends that declaring code is not\ncopyrightable because the \u201cmerger doctrine\u201d bars copyright\nprotection when there is only one way to express an idea. That\nargument fails for the same reasons Google\u2019s \u00a7102(b) argument\nfails. Even if the doctrine exists, Google admits that it is merely\nan application of \u00a7102(b). And, in any event, there may have been\nonly one way for Google to copy the lines of declaring code, but\nthere were innumerable ways for Oracle to write them. Certainly,\nApple and Microsoft managed to create their own declaring code.IIIThe Court inexplicably declines to address\ncopyrightability. Its sole stated reason is that \u201ctechnological,\neconomic, and business-related circumstances\u201d are \u201crapidly\nchanging.\u201dAnte, at 15. That, of course, has been a constant\nwhere computers are concerned.Rather than address this principal question, the\nCourt simply assumes that declaring code is protected and then\nconcludes that every fair-use factor favors Google. I agree with\nthe majority that Congress did not \u201cshiel[d] computer programs from\nthe ordinary application\u201d of fair use.Ante,at 18. But the\nmajority\u2019s application of fair use is far from ordinary. By\nskipping copyrightability, the majority gets the methodology\nbackward, causing the Court to sidestep a key conclusion that\nineluctably affects the fair-use analysis: Congress rejected\ncategorical distinctions between declaring and implementing code.\nBut the majority creates just such a distinction. The result of\nthis distorting analysis is an opinion that makes it difficult to\nimagine any circumstance in which declaring code will remain\nprotected by copyright.I agree with the majority that, under our\nprecedent, fair use is a mixed question of fact and law and that\nquestions of law predominate.[3] Because the jury issued a finding of fair use in favor\nof Google, we must construe all factual disputes and inferences in\nGoogle\u2019s favor and ask whether the evidence was sufficient as a\nmatter of law to support the jury\u2019s verdict. See Fed. Rule Civ.\nProc. 50(b). But whether a statutory fair-use factor favors one\nside or the other is a legal question reviewedde\u00a0novo.\nCongress has established four statutory fair-use factors for courts\nto weigh.[4] Three decisively\nfavor Oracle. And even assuming that the remaining factor favors\nGoogle, that factor, without more, cannot legally establish fair\nuse in this context.The majority holds otherwise\u2014concluding thateveryfactor favors Google\u2014by relying, in large part, on a\ndistinction it draws between declaring and implementing code, a\ndistinction that the statute rejects. Tellingly, the majority\nevaluates the factors neither in sequential order nor in order of\nimportance (at least two factors are more important under our\nprecedent[5]). Instead, it\nstarts with the second factor: the nature of the copyrighted work.\nIt proceeds in this manner in order to create a distinction between\ndeclaring and implementing code that renders the former less worthy\nof protection than the latter. Because the majority\u2019s mistaken\nanalysis rests so heavily on this factor, I begin with it as\nwell.A.\u2003The Nature of the Copyrighted WorkThis factor requires courts to assess the\nlevel of creativity or functionality in the original work. It\ngenerally favors fair use when a copyrighted work is more\n\u201cinformational or functional\u201d than \u201ccreative.\u201d 4 M. Nimmer & D.\nNimmer, Copyright \u00a713.05[A][2][a] (2019). Because code is\npredominantly functional, this factor will often favor copying when\nthe original work is computer code. But because Congress determined\nthat declaring and implementing code are copyrightable, this factor\nalone cannot support a finding of fair use.The majority, however, uses this factor to\ncreate a distinction between declaring and implementing code that\nin effect removes copyright protection from declaring code. It\nconcludes that, unlike implementing code, declaring code is far\n\u201cfrom the core of copyright\u201d because it becomes valuable only when\nthird parties (computer programmers) value it and because it is\n\u201cinherently bound together with uncopyrightable ideas.\u201dAnte, at 23\u201324.Congress, however, rejected this sort of\ncategorical distinction that would make declaring code less worthy\nof protection. The Copyright Act protects code that operates \u201cin a\ncomputer in order to bring about a certain result\u201d both \u201cdirectly\u201d\n(implementing code) and \u201cindirectly\u201d (declaring code). \u00a7101. And if\nanything, declaring code iscloserto the \u201ccore of\ncopyright.\u201dAnte, at 24. Developers cannot even see\nimplementing code.Oracle Am.,Inc.v.Google\nInc., 2016 WL 3181206, *4 (ND Cal., June 8, 2016); see alsoante, at 23 (declaring code is \u201cuser-centered\u201d).\nImplementing code thus conveysnoexpression to developers.\nDeclaring code, in contrast, is user facing. It must be designed\nand organized in a way that is intuitive and understandable to\ndevelopers so that they can invoke it.Even setting those concerns aside, the\nmajority\u2019s distinction is untenable. True, declaring code is\n\u201cinherently bound together with uncopyrightable ideas.\u201dAnte,at 23\u201324. Is anything not? Books are inherently bound\nwith uncopyrightable ideas\u2014the use of chapters, having a plot, or\nincluding dialogue or footnotes. This does not place books far\n\u201cfrom the core of copyright.\u201d And implementing code, which the\nmajority concedes is copyrightable, is inherently bound up with\n\u201cthe division of computing tasks\u201d that cannot be\ncopyrighted.[6]Ante, at\n22. We have not discounted a work of authorship simply because it\nis associated with noncopyrightable ideas. While ideas cannot be\ncopyrighted, expressions of those ideas can.Golan, 565\nU.\u00a0S., at 328.Similarly, it makes no difference that the value\nof declaring code depends on how much time third parties invest in\nlearning it. Many other copyrighted works depend on the same. A\nBroadway musical script needs actors and singers to invest time\nlearning and rehearsing it. But a theater cannot copy a script\u2014the\nrights to which are held by a smaller theater\u2014simply because it\nwants to entice actors to switch theaters and because copying the\nscript is more efficient than requiring the actors to learn a new\none.What the majority says is true of declaring code\nis no less true of implementing code. Declaring code is how\nprogrammers access prewritten implementing code. The value of that\nimplementing code thus is directly proportional to how much\nprogrammers value the associated declaring code. The majority\ncorrectly recognizes that declaring code \u201cis inextricably bound up\nwith implementing code,\u201dante, at 22\u201323, but it overlooks\nthe implications of its own conclusion.Only after wrongly concluding that the nature of\ndeclaring code makes that code generally unworthy of protection\ndoes the Court move on to consider the other factors. This opening\nmistake taints the Court\u2019s entire analysis.B.\u2003Market Effects\u201c[U]ndoubtedly the single most important\nelement of fair use\u201d is the effect of Google\u2019s copying \u201c\u00a0\u2018upon\nthe potential market for or value of [Oracle\u2019s] copyrighted\nwork.\u2019\u00a0\u201dHarper & Row,Publishers,Inc. v.Nation Enterprises,471\nU.S. 539, 566 (1985). As the Federal Circuit correctly\ndetermined, \u201cevidence of actual and potential harm stemming from\nGoogle\u2019s copying was \u2018overwhelming.\u2019\u00a0\u201d 886 F.3d 1179, 1209\n(2018). By copying Oracle\u2019s code to develop and release Android,\nGoogle ruined Oracle\u2019s potential market in at least two ways.First, Google eliminated the reason\nmanufacturers were willing to pay to install the Java platform.\nGoogle\u2019s business model differed from Oracle\u2019s. While Oracle earned\nrevenue by charging device manufacturers to install the Java\nplatform, Google obtained revenue primarily through ad sales. Its\nstrategy was to release Android to device manufacturers for free\nand then use Android as a vehicle to collect data on consumers and\ndeliver behavioral ads. With a free product available that included\nmuch of Oracle\u2019s code (and thus with similar programming\npotential), device manufacturers no longer saw much reason to pay\nto embed the Java platform.For example, before Google released Android,\nAmazon paid for a license to embed the Java platform in Kindle\ndevices. But after Google released Android, Amazon used the\ncost-free availability of Android to negotiate a 97.5% discount on\nits license fee with Oracle. Evidence at trial similarly showed\nthat right after Google released Android, Samsung\u2019s contract with\nOracle dropped from $40 million to about $1 million. Google\ncontests none of this except to say that Amazon used a different\nJava platform, Java Micro Edition instead of Java Standard Edition.\nThat difference is inconsequential because the former was simply a\nsmaller subset of the latter. Google copied code found in both\nplatforms. The majority does not dispute\u2014or even mention\u2014this\nenormous harm.Second, Google interfered with opportunities for\nOracle to license the Java platform to developers of smartphone\noperating systems. Before Google copied Oracle\u2019s code, nearly every\nmobile phone on the market contained the Java platform. Oracle\u2019s\ncode was extraordinarily valuable to anybody who wanted to develop\nsmartphones, which explains why Google tried no fewer than four\ntimes to license it. The majority\u2019s remark that Google also sought\nother licenses from Oracle,ante, at 33, does not change\nthis central fact. Both parties agreed that Oracle could enter\nGoogle\u2019s current market by licensing its declaring code. But by\ncopying the code and releasing Android, Google eliminated Oracle\u2019s\nopportunity to license its code for that use.The majority writes off this harm by saying that\nthe jury could have found that Oracle might not have been able to\nenter the modern smartphone market successfully.[7]Ante, at 31\u201332. But whether Oracle\ncould itself enter that market is only half the picture. We look at\nnot only the potential market \u201cthat creators of original works\nwould in general develop\u201d but also those potential markets the\ncopyright holder might \u201clicense others to develop.\u201dCampbellv.Acuff-Rose Music,Inc.,510\nU.S. 569, 592 (1994). A book author need not be able to\npersonally convert a book into a film so long as he can license\nsomeone else to do so. That Oracle could have licensed its code for\nuse in Android is undisputed.Unable to seriously dispute that Google\u2019s\nactions had a disastrous effect on Oracle\u2019s potential market, the\nmajority changes course and asserts that enforcing copyright\nprotection could harm the public by giving Oracle the power to\n\u201climi[t] the future creativity\u201d of programs on Android.Ante, at 34. But this case concerns only versions of Android\nreleased through November 2014. Order in No. 3:10\u2013cv\u20133561 (ND Cal.,\nFeb. 5, 2016), Doc. 1479, p.\u00a02 (identifying versions through\nAndroid Lollipop 5.0). Google has released six major versions since\nthen. Only about 7.7% of active Android devices still run the\nversions at issue.[8] The\nmajority\u2019s concern about a lock-in effect might carry more weight\nif this suit concerned versions of Android widely in use or that\nwill be widely in use. It makes little sense in a suit about\nversions that are close to obsolete.The majority\u2019s concern about a lock-in effect\nalso is speculation belied by history. First, Oracle never had\nlock-in power. The majority (again) overlooks that Apple and\nMicrosoft created mobile operating systems without using Oracle\u2019s\ndeclaring code. Second, Oracle always made its declaring code\nfreely available to programmers. There is little reason to suspect\nOracle might harm programmers by stopping now. And third, the\nmajority simply assumes that the jury, in a future suit over\ncurrent Android versions, would give Oracle control of Android\ninstead of just awarding damages or perpetual royalties.If the majority is going to speculate about what\nOraclemightdo, it at least should consider what Googlehasdone. The majority expresses concern that Oracle might\nabuse its copyright protection (on outdated Android versions) and\n\u201c\u00a0\u2018attempt to monopolize the market.\u2019\u00a0\u201dAnte, at\n34\u201335. But it is Google that recently was fined a record $5 billion\nfor abusing Android to violate antitrust laws. Case AT.40099,Google Android, July 18, 2018 (Eur. Comm\u2019n-Competition);\nEuropean Comm\u2019n Press Release, Commission Fines Google \u20ac4.34\nBillion for Illegal Practices Regarding Android Mobile Devices to\nStrengthen Dominance of Google\u2019s Search Engine, July 18, 2018.\nGoogle controls the most widely used mobile operating system in the\nworld. And if companies may now freely copy libraries of declaring\ncode whenever it is more convenient than writing their own, others\nwill likely hesitate to spend the resources Oracle did to create\nintuitive, well-organized libraries that attract programmers and\ncould compete with Android. If the majority is worried about\nmonopolization, it ought to consider whether Google is the greater\nthreat.By copying Oracle\u2019s work, Google decimated\nOracle\u2019s market and created a mobile operating system now in over\n2.5 billion actively used devices, earning tens of billions of\ndollars every year. If these effects on Oracle\u2019s potential marketfavorGoogle, something is very wrong with our fair-use\nanalysis.C.\u2003The Purpose and Character of the UseThe second-most important factor\u2014\u201cthe purpose\nand character of the use, including whether such use is of a\ncommercial nature or is for nonprofit educational purposes,\u201d\n\u00a7107(1)\u2014requires us to consider whether use was \u201ccommercial\u201d and\nwhether it was \u201ctransformative.\u201dCampbell, 510 U.\u00a0S.,\nat 578\u2013579. Both aspects heavily favor Oracle.Begin with the overwhelming commercial nature of\nGoogle\u2019s copying. In 2015 alone, the year before the fair-use\ntrial, Google earned $18 billion from Android. That number has no\ndoubt dramatically increased as Android has grown to dominate the\nglobal market share.[9] On this\nscale, Google\u2019s use of Oracle\u2019s declaring code weighs heavily\u2014if\nnot decisively\u2014against fair use.The majority attempts to dismiss this\noverwhelming commercial use by noting that commercial use does \u201cnot\nnecessarily\u201d weigh against fair use.Ante, at 27. True\nenough. Commercial use sometimes can be overcome by use that is\nsufficiently \u201ctransformative.\u201dCampbell, 510 U.\u00a0S., at\n579. But \u201cwe cannot ignore [Google\u2019s]intended purposeof\nsupplanting [Oracle\u2019s] commercially valuable\u201d platform with its\nown.Harper, 471 U.\u00a0S., at 562 (emphasis in original).\nEven if we could, we have never found fair use for copying that\nreaches into the tens of billions of dollars and wrecksthe copyright holder\u2019s market.Regardless, Google fairs no better on\ntransformative use. A court generally cannot find fair use unless\nthe copier\u2019s use is transformative.[10] A work is \u201ctransformative\u201d if it \u201cadds something new,\nwith a further purpose or different character, altering the first\nwith new expression, meaning, or message.\u201dCampbell, 510\nU.\u00a0S., at 579. This question is \u201cguided by the examples [of\nfair use] given in the preamble to \u00a7107.\u201dId., at 578. Those\nexamples include: \u201ccriticism, comment, news reporting, teaching\n.\u00a0.\u00a0.\u00a0, scholarship, or research.\u201d \u00a7107. Although\nthese examples are not exclusive, they are illustrative, and\nGoogle\u2019s repurposing of Java code from larger computers to smaller\ncomputers resembles none of them. Google did not use Oracle\u2019s code\nto teach or reverse engineer a system to ensure compatibility.\nInstead, to \u201cavoid the drudgery in working up something fresh,\u201did., at 580, Google used the declaring code for the same\nexact purpose Oracle did. As the Federal Circuit correctly\ndetermined, \u201c[t]here is nothing fair about taking a copyrighted\nwork verbatim and using it for the same purpose and function as the\noriginal in a competing platform.\u201d 886 F.\u00a03d, at 1210.The majority acknowledges that Google used the\ncopied declaring code \u201cfor the same reason\u201d Oracle did.Ante, at 25. So, by turns, the majority transforms the\ndefinition of \u201ctransformative.\u201d Now, we are told, \u201ctransformative\u201d\nsimply means\u2014at least for computer code\u2014a use that will help others\n\u201ccreate new products.\u201dIbid;accord,ante, at 26\n(Google\u2019s copying \u201ccan further the development of computer\nprograms\u201d).That new definition eviscerates copyright. A\nmovie studio that converts a book into a film without permission\nnot only creates a new product (the film) but enables others to\n\u201ccreate products\u201d\u2014film reviews, merchandise, YouTube highlight\nreels, late night television interviews, and the like. Nearly every\ncomputer program, once copied, can be used to create new products.\nSurely the majority would not say that an author can pirate the\nnext version of Microsoft Word simply because he can use it to\ncreate new manuscripts.[11]Ultimately, the majority wrongly conflates\ntransformative use with derivative use. To be transformative, a\nwork must do something fundamentally different from the original. A\nwork that simply serves the same purpose in a new context\u2014which the\nmajority concedes is true here\u2014is derivative, not transformative.\nCongress made clear that Oracle holds \u201cthe exclusive rights\n.\u00a0.\u00a0. to prepare derivative works.\u201d \u00a7106(2). Rather than\ncreate a transformative product, Google \u201cprofit[ed] from\nexploitation of the copyrighted material without paying the\ncustomary price.\u201dHarper, 471 U.\u00a0S., at 562.D.\u2003The Amount and Substantiality of the Portion\nUsedThe statutory fair-use factors also instruct\nus to consider \u201cthe amount and substantiality of the portion used\nin relation to the copyrighted work as a whole.\u201d \u00a7107(3). In\ngeneral, the greater the amount of use, the more likely the copying\nis unfair.Ibid.But even if the copier takes only a small\namount, copying the \u201c\u00a0\u2018heart\u2019\u00a0\u201d or \u201cfocal points\u201d of a\nwork weighs against fair use,Harper, 471 U.\u00a0S., at\n565\u2013566, unless \u201c\u00a0\u2018no more was taken than necessary\u2019\u00a0\u201d\nfor the copier to achieve transformative use,Campbell, 510\nU.\u00a0S., at 589.Google does not dispute the Federal Circuit\u2019s\nconclusion that it copied the heart or focal points of Oracle\u2019s\nwork. 886 F.\u00a03d, at 1207. The declaring code is what attracted\nprogrammers to the Java platform and why Google was so interested\nin that code. And Google copied that code \u201cverbatim,\u201d which weighs\nagainst fair use.Harper, 471 U.\u00a0S., at 565. The\nmajority does not disagree. Instead, it concludes that Google took\nno more than necessary to create new products. That analysis fails\nbecause Google\u2019s use is not transformative.Campbell, 510\nU.\u00a0S., at 586 (recognizing that this fourth factor \u201cwill\nharken back to the [purpose-and-character] statutory facto[r]\u201d).\nThis factor thus weighs against Google.Even if Google\u2019s use were transformative, the\nmajority is wrong to conclude that Google copied only a small\nportion of the original work. The majority points out that the\n11,500 lines of declaring code\u2014enough to fill about 600 pages in an\nappendix, Tr. of Oral Arg. 57\u2014were just a fraction of the code in\nthe Java platform. But the proper denominator isdeclaring\ncode, not all code. A copied work is quantitatively substantial\nif it could \u201cserve as a market substitute for the original\u201d work or\n\u201cpotentially licensed derivatives\u201d of that work.Campbell,\n510 U.\u00a0S., at 587. The declaring code is what attracted\nprogrammers. And it is what made Android a \u201cmarket substitute\u201d for\n\u201cpotentially licensed derivatives\u201d of Oracle\u2019s Java platform.\nGoogle\u2019s copying was both qualitatively and quantitatively\nsubstantial.*\u2003\u2003*\u2003\u2003*In sum, three of the four statutory fair-use\nfactors weigh decidedly against Google. The nature of the\ncopyrighted work\u2014the sole factor possibly favoring Google\u2014cannot by\nitself support a determination of fair use because holding\notherwise would improperly override Congress\u2019 determination that\ndeclaring code is copyrightable.[12]IVThe majority purports to save for another day\nthe question whether declaring code is copyrightable. The only\napparent reason for doing so is because the majority cannot square\nits fundamentally flawed fair-use analysis with a finding that\ndeclaring code is copyrightable. The majority has used fair use to\neviscerate Congress\u2019 considered policy judgment. I respectfully\ndissent.Notes1A different company, Sun,\ncreated the library. But because Oracle later purchased Sun, for\nsimplicity I refer to both companies as Oracle.2Consider what the\nrelevant text of a simple method\u2014designed to return the largest of\nthree integers\u2014might look like: public static int MaxNum (int x,\nint y, int z) { if (x >= y && x >= z) return x; else\nif (y >= x && y >= z) return y; else return z; } The\nfirst line is declaring code that defines the method, including\nwhat inputs (integers x, y, and z) it can process and what it can\noutput (an integer). The remainder is implementing code that checks\nwhich of the inputs is largest and returns the result. Once this\ncode is written, a programmer could invoke it by typing, for\nexample, \u201cMaxNum (4, 12, 9).\u201d3I would not, however,\ndefinitively resolve Google\u2019s argument that the Seventh Amendment\ncommits the question of fair use to a jury. I tend to agree with\nthe Court that fair use was not \u201citself necessarily a jury issue\u201d\nwhen the Constitution was ratified.Markmanv.Westview\nInstruments,Inc.,517 U.S.\n370, 376\u2013377 (1996). Google cites cases about \u201cfair\nabridgment,\u201d but Congress has since made clear that copyright\nholders have \u201cexclusive rights\u201d over any \u201cabridgment.\u201d 17\nU.\u00a0S.\u00a0C. \u00a7\u00a7101, 106. And in any event, judges often\ndeclined to refer these issues to juries. See,e.g.,Gylesv.Wilcox, 2 Atk. 141, 144, 26 Eng. Rep. 489,\n490\u2013491 (Ch. 1740);Folsomv.Marsh, 9 F. Cas. 342,\n345\u2013349 (No. 4,901) (CC Mass. 1841) (Story, J). Still, we should\nnot so casually decide this question when the parties barely\naddressed it.4The factors are: \u201c(1) the\npurpose and character of the use, including whether such use is of\na commercial nature or is for nonprofit educational purposes; (2)\nthe nature of the copyrighted work; (3) the amount and\nsubstantiality of the portion used in relation to the copyrighted\nwork as a whole; and (4) the effect of the use upon the potential\nmarket for or value of the copyrighted work.\u201d\n\u00a7\u00a7107(1)\u2013(4).5The fourth factor\u2014the\neffect of Google\u2019s copying on the potential market for Oracle\u2019s\nwork\u2014is \u201cundoubtedly the single most important element of fair\nuse.\u201dHarper & Row,Publishers,Inc. v.Nation Enterprises,471 U.S.\n539, 566 (1985). The first factor\u2014the purpose and character of\nthe use, including whether the use is commercial\u2014is the second-most\nimportant because it can prove dispositive. Seeid., at 550\n(\u201c[In general,] the fair use doctrine has always precluded a use\nthat \u2018supersede[s] the use of the original\u2019\u00a0\u201d).6The majority also\nbelittles declaring code by suggesting it is simply a way to\norganize implementing code.Ante, at 22\u201323. Not so.\nDeclaring codedefinessubprograms of implementing code,\nincluding by controlling what inputs they can process. Similarly,\nthe majority is wrong to suggest that the purpose of declaring code\nis to connect pre-existing method calls to implementing code.Ante,at 5. Declaring codecreatesthe method\ncalls.7It also suggests that\nOracle may have received some incidental benefit from Android.Ante, at 32\u201333. But even assuming that is true, it would go\nto the question of damages, not fair use. And there is no evidence\nthat any benefit came even close to offsetting Oracle\u2019s enormous\nloss.8Rahman, Android Version\nDistribution Statistics Will Now Only Be Available in Android\nStudio (Apr. 10, 2020),\nhttps://www.xda-developers.com/android-version-distribution-statistics-android-studio.9The real value also may\nbe much higher because Android indirectly boosts other sources of\nrevenue. For years Google has set its search engine as the default\nengine on Android. Google can use that engine to collect reams of\ndata used to deliver behavioral advertisements to consumers on\ndesktops. Using control over Android to choose a default search\nengine may seem trivial, but Google certainly does not think so.\nAccording to a Goldman Sachs analysis, Google paid Apple$12\nbillionto be the default search engine for Safari, Apple\u2019s web\nbrowser, for just one year. Leswing, Apple Makes Billions From\nGoogle\u2019s Dominance in Search\u2014And It\u2019s a Bigger Business Than iCloud\nor Apple Music, Business Insider, Sept. 29, 2018. Google does not\nappear to have disputed this figure.10Although \u201ctransformative use is notabsolutelynecessary\u201d every time,Campbellv.Acuff-Rose Music,Inc.,510 U.S.\n569, 579, and n.\u00a011 (1994) (emphasis added), as a general\nmatter \u201cthe fair use doctrine has always precluded a use that\n\u2018supersedes the use of the original,\u2019\u00a0\u201dHarper, 471\nU.\u00a0S., at 550 (brackets omitted).11Because the majority\u2019s reasoning\nwould undermine copyright protection for so many products long\nunderstood to be protected, I understand the majority\u2019s holding as\na good-for-declaring-code-only precedent.12To be\nsure, these factors are not necessarily exclusive, but they are\n\u201cespecially relevant,\u201dHarper, 471 U.\u00a0S., at 560; the\nmajority identifies no other relevant factors; and I can think of\nnone that could overcome the overwhelming weight of these key\nfactors.",
    "joined": []
}